/**
 * 
 */
package seahorse.internal.business.credentialservice;

import seahorse.internal.business.credentialservice.datacontracts.CreateCredentialRequestMessageEntity;
import seahorse.internal.business.credentialservice.datacontracts.DeleteCredentialMessageEntity;
import seahorse.internal.business.credentialservice.datacontracts.GetCredentialByUserIdMessageEntity;
import seahorse.internal.business.credentialservice.datacontracts.GetCredentialMessageEntity;
import seahorse.internal.business.credentialservice.datacontracts.UpdateCredentialMessageEntity;
import seahorse.internal.business.katavuccolservice.common.datacontracts.Result;

/**
 * @author admin
 *
 */
public interface ICredentialServiceVerifier {

	Result verifyGetCredentialsByUserId(GetCredentialByUserIdMessageEntity getCredentialByUserIdMessageEntity);

	Result verifyCreateCredentials(CreateCredentialRequestMessageEntity credentialRequestMessageEntity);

	Result isUserIdValid(CreateCredentialRequestMessageEntity credentialsRequestMessageEntity);

	Result isCategoryIdValid(CreateCredentialRequestMessageEntity credentialsRequestMessageEntity);

	Result isCredentialTypeIdValid(CreateCredentialRequestMessageEntity credentialRequestMessageEntity);

	Result isCredentialTypeDuplicateAllowedValid(CreateCredentialRequestMessageEntity credentialRequestMessageEntity);

	Result isCredentialTypeSubItemAllowedValid(CreateCredentialRequestMessageEntity credentialRequestMessageEntity);

	Result isEncryptValid(CreateCredentialRequestMessageEntity credentialRequestMessageEntity);

	Result verifyUpdateCredential(UpdateCredentialMessageEntity updateCredentialMessageEntity);

	Result isUserIdValid(UpdateCredentialMessageEntity updateCredentialMessageEntity);

	Result isCredentialIdValid(UpdateCredentialMessageEntity updateCredentialMessageEntity);

	Result isCategoryIdValid(UpdateCredentialMessageEntity updateCredentialMessageEntity);

	Result isCredentialTypeIdValid(UpdateCredentialMessageEntity updateCredentialMessageEntity);

	Result verifyDeleteCredential(DeleteCredentialMessageEntity deleteCredentialMessageEntity);

	Result isUserIdValid(DeleteCredentialMessageEntity deleteCredentialMessageEntity);

	Result isCredentialIdValid(DeleteCredentialMessageEntity deleteCredentialMessageEntity);

	Result verifyGetCredentials(GetCredentialMessageEntity getCredentialMessageEntity);

}
